# vim: set ft=python:
"""
Pyvim configuration. Save to file to: ~/.pyvimrc
"""

import sys
import os
from prompt_toolkit.application import run_in_terminal
from prompt_toolkit.filters import ViInsertMode
from prompt_toolkit.key_binding.key_processor import KeyPress
from prompt_toolkit.keys import Keys
from subprocess import call

__all__ = ("configure",)


def on_open_buffer(location, buffer):
    if location:
        match os.path.splitext(location)[-1]:
            case ".go":
                buffer.expand_tab = False
            case ".ex":
                buffer.tabstop = buffer.shifwidth = 2
            case ".exs":
                buffer.tabstop = buffer.shifwidth = 2


def configure(editor):
    """
    Configuration function. We receive a ``pyvim.editor.Editor`` instance as
    argument that we can manipulate in here.
    """
    # Show line numbers by default. (:set number)
    editor.show_line_numbers = False

    # Highlight search. (:set hlsearch)
    editor.highlight_search = True

    # Case insensitive searching. (:set ignorecase)
    editor.ignore_case = True

    # Expand tab. (Pressing Tab will insert spaces.)
    editor.expand_tab = True  # (:set expandtab)
    editor.tabstop = 4  # (:set tabstop=4)
    editor.shiftwidth = 4  # (:set shiftwidth=4)

    # Scroll offset (:set scrolloff)
    editor.scroll_offset = 2

    # Show tabs and trailing whitespace. (:set list)
    editor.display_unprintable_characters = True

    # Use Jedi for autocompletion of Python files. (:set jedi)
    editor.enable_jedi = True

    # Search wrap scan. (:set ws)
    editor.enable_wrapscan = True

    # Apply colorscheme. (:colorscheme vim)
    editor.use_colorscheme("vim")

    editor.on_open_buffer = on_open_buffer

    # Add custom key bindings:

    @editor.add_key_binding("j", "j", filter=ViInsertMode())
    def _(event):
        """
        Typing 'jj' in Insert mode, should go back to navigation mode.

        (imap jj <esc>)
        """
        event.cli.key_processor.feed(KeyPress(Keys.Escape))

    @editor.add_key_binding(Keys.F9)
    def save_and_execute_python_file(event):
        """
        F9: Execute the current Python file.
        """
        # Save buffer first.
        editor_buffer = editor.current_editor_buffer

        if editor_buffer is not None:
            if editor_buffer.location is None:
                editor.show_message("File doesn't have a filename. Please save first.")
                return
            else:
                editor_buffer.write()

        # Now run the Python interpreter. But use
        # `CommandLineInterface.run_in_terminal` to go to the background and
        # not destroy the window layout.
        def execute():
            call([sys.executable, editor_buffer.location])
            input("Press enter to continue...")

        run_in_terminal(execute)
